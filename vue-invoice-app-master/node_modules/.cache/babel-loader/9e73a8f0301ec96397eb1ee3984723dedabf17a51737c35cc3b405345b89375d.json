{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\nimport db from \"../firebase/firebaseInit\";\nexport default createStore({\n  state: {\n    invoiceData: [],\n    invoiceModal: null,\n    modalActive: null,\n    invoicesLoaded: null,\n    currentInvoiceArray: null,\n    editInvoice: null\n  },\n  mutations: {\n    TOGGLE_INVOICE(state) {\n      state.invoiceModal = !state.invoiceModal;\n    },\n    TOGGLE_MODAL(state) {\n      state.modalActive = !state.modalActive;\n    },\n    SET_INVOICE_DATA(state, payload) {\n      state.invoiceData.push(payload);\n    },\n    INVOICES_LOADED(state) {\n      state.invoicesLoaded = true;\n    },\n    SET_CURRENT_INVOICE(state, payload) {\n      state.currentInvoiceArray = state.invoiceData.filter(invoice => {\n        return invoice.invoiceId === payload;\n      });\n    },\n    TOGGLE_EDIT_INVOICE(state) {\n      state.editInvoice = !state.editInvoice;\n    },\n    DELETE_INVOICE(state, payload) {\n      state.invoiceData = state.invoiceData.filter(invoice => invoice.docId !== payload);\n    },\n    UPDATE_STATUS_TO_PAID(state, payload) {\n      state.invoiceData.forEach(invoice => {\n        if (invoice.docId === payload) {\n          invoice.invoicePaid = true;\n          invoice.invoicePending = false;\n        }\n      });\n    },\n    UPDATE_STATUS_TO_PENDING(state, payload) {\n      state.invoiceData.forEach(invoice => {\n        if (invoice.docId === payload) {\n          invoice.invoicePaid = false;\n          invoice.invoicePending = true;\n          invoice.invoiceDraft = false;\n        }\n      });\n    }\n  },\n  actions: {\n    async GET_INVOICES({\n      commit,\n      state\n    }) {\n      const getData = db.collection(\"invoices\");\n      const results = await getData.get();\n      results.forEach(doc => {\n        if (!state.invoiceData.some(invoice => invoice.docId === doc.id)) {\n          const data = {\n            docId: doc.id,\n            invoiceId: doc.data().invoiceId,\n            billerStreetAddress: doc.data().billerStreetAddress,\n            billerCity: doc.data().billerCity,\n            billerZipCode: doc.data().billerZipCode,\n            billerCountry: doc.data().billerCountry,\n            clientName: doc.data().clientName,\n            clientEmail: doc.data().clientEmail,\n            clientStreetAddress: doc.data().clientStreetAddress,\n            clientCity: doc.data().clientCity,\n            clientZipCode: doc.data().clientZipCode,\n            clientCountry: doc.data().clientCountry,\n            invoiceDateUnix: doc.data().invoiceDateUnix,\n            invoiceDate: doc.data().invoiceDate,\n            paymentTerms: doc.data().paymentTerms,\n            paymentDueDateUnix: doc.data().paymentDueDateUnix,\n            paymentDueDate: doc.data().paymentDueDate,\n            productDescription: doc.data().productDescription,\n            invoiceItemList: doc.data().invoiceItemList,\n            invoiceTotal: doc.data().invoiceTotal,\n            invoicePending: doc.data().invoicePending,\n            invoiceDraft: doc.data().invoiceDraft,\n            invoicePaid: doc.data().invoicePaid\n          };\n          commit(\"SET_INVOICE_DATA\", data);\n        }\n      });\n      commit(\"INVOICES_LOADED\");\n    },\n    async UPDATE_INVOICE({\n      commit,\n      dispatch\n    }, {\n      docId,\n      routeId\n    }) {\n      commit(\"DELETE_INVOICE\", docId);\n      await dispatch(\"GET_INVOICES\");\n      commit(\"TOGGLE_INVOICE\");\n      commit(\"TOGGLE_EDIT_INVOICE\");\n      commit(\"SET_CURRENT_INVOICE\", routeId);\n    },\n    async DELETE_INVOICE({\n      commit\n    }, docId) {\n      const getInvoice = db.collection(\"invoices\").doc(docId);\n      await getInvoice.delete();\n      commit(\"DELETE_INVOICE\", docId);\n    },\n    async UPDATE_STATUS_TO_PAID({\n      commit\n    }, docId) {\n      const getInvoice = db.collection(\"invoices\").doc(docId);\n      await getInvoice.update({\n        invoicePaid: true,\n        invoicePending: false\n      });\n      commit(\"UPDATE_STATUS_TO_PAID\", docId);\n    },\n    async UPDATE_STATUS_TO_PENDING({\n      commit\n    }, docId) {\n      const getInvoice = db.collection(\"invoices\").doc(docId);\n      await getInvoice.update({\n        invoicePaid: false,\n        invoicePending: true,\n        invoiceDraft: false\n      });\n      commit(\"UPDATE_STATUS_TO_PENDING\", docId);\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","db","state","invoiceData","invoiceModal","modalActive","invoicesLoaded","currentInvoiceArray","editInvoice","mutations","TOGGLE_INVOICE","TOGGLE_MODAL","SET_INVOICE_DATA","payload","push","INVOICES_LOADED","SET_CURRENT_INVOICE","filter","invoice","invoiceId","TOGGLE_EDIT_INVOICE","DELETE_INVOICE","docId","UPDATE_STATUS_TO_PAID","forEach","invoicePaid","invoicePending","UPDATE_STATUS_TO_PENDING","invoiceDraft","actions","GET_INVOICES","commit","getData","collection","results","get","doc","some","id","data","billerStreetAddress","billerCity","billerZipCode","billerCountry","clientName","clientEmail","clientStreetAddress","clientCity","clientZipCode","clientCountry","invoiceDateUnix","invoiceDate","paymentTerms","paymentDueDateUnix","paymentDueDate","productDescription","invoiceItemList","invoiceTotal","UPDATE_INVOICE","dispatch","routeId","getInvoice","delete","update","modules"],"sources":["/Users/jeniferpantoja/Downloads/vue-invoice-app-master/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\nimport db from \"../firebase/firebaseInit\";\n\nexport default createStore({\n  state: {\n    invoiceData: [],\n    invoiceModal: null,\n    modalActive: null,\n    invoicesLoaded: null,\n    currentInvoiceArray: null,\n    editInvoice: null,\n  },\n  mutations: {\n    TOGGLE_INVOICE(state) {\n      state.invoiceModal = !state.invoiceModal;\n    },\n    TOGGLE_MODAL(state) {\n      state.modalActive = !state.modalActive;\n    },\n    SET_INVOICE_DATA(state, payload) {\n      state.invoiceData.push(payload);\n    },\n    INVOICES_LOADED(state) {\n      state.invoicesLoaded = true;\n    },\n    SET_CURRENT_INVOICE(state, payload) {\n      state.currentInvoiceArray = state.invoiceData.filter((invoice) => {\n        return invoice.invoiceId === payload;\n      });\n    },\n    TOGGLE_EDIT_INVOICE(state) {\n      state.editInvoice = !state.editInvoice;\n    },\n    DELETE_INVOICE(state, payload) {\n      state.invoiceData = state.invoiceData.filter((invoice) => invoice.docId !== payload);\n    },\n    UPDATE_STATUS_TO_PAID(state, payload) {\n      state.invoiceData.forEach((invoice) => {\n        if (invoice.docId === payload) {\n          invoice.invoicePaid = true;\n          invoice.invoicePending = false;\n        }\n      });\n    },\n    UPDATE_STATUS_TO_PENDING(state, payload) {\n      state.invoiceData.forEach((invoice) => {\n        if (invoice.docId === payload) {\n          invoice.invoicePaid = false;\n          invoice.invoicePending = true;\n          invoice.invoiceDraft = false;\n        }\n      });\n    },\n  },\n  actions: {\n    async GET_INVOICES({ commit, state }) {\n      const getData = db.collection(\"invoices\");\n      const results = await getData.get();\n      results.forEach((doc) => {\n        if (!state.invoiceData.some((invoice) => invoice.docId === doc.id)) {\n          const data = {\n            docId: doc.id,\n            invoiceId: doc.data().invoiceId,\n            billerStreetAddress: doc.data().billerStreetAddress,\n            billerCity: doc.data().billerCity,\n            billerZipCode: doc.data().billerZipCode,\n            billerCountry: doc.data().billerCountry,\n            clientName: doc.data().clientName,\n            clientEmail: doc.data().clientEmail,\n            clientStreetAddress: doc.data().clientStreetAddress,\n            clientCity: doc.data().clientCity,\n            clientZipCode: doc.data().clientZipCode,\n            clientCountry: doc.data().clientCountry,\n            invoiceDateUnix: doc.data().invoiceDateUnix,\n            invoiceDate: doc.data().invoiceDate,\n            paymentTerms: doc.data().paymentTerms,\n            paymentDueDateUnix: doc.data().paymentDueDateUnix,\n            paymentDueDate: doc.data().paymentDueDate,\n            productDescription: doc.data().productDescription,\n            invoiceItemList: doc.data().invoiceItemList,\n            invoiceTotal: doc.data().invoiceTotal,\n            invoicePending: doc.data().invoicePending,\n            invoiceDraft: doc.data().invoiceDraft,\n            invoicePaid: doc.data().invoicePaid,\n          };\n          commit(\"SET_INVOICE_DATA\", data);\n        }\n      });\n      commit(\"INVOICES_LOADED\");\n    },\n    async UPDATE_INVOICE({ commit, dispatch }, { docId, routeId }) {\n      commit(\"DELETE_INVOICE\", docId);\n      await dispatch(\"GET_INVOICES\");\n      commit(\"TOGGLE_INVOICE\");\n      commit(\"TOGGLE_EDIT_INVOICE\");\n      commit(\"SET_CURRENT_INVOICE\", routeId);\n    },\n    async DELETE_INVOICE({ commit }, docId) {\n      const getInvoice = db.collection(\"invoices\").doc(docId);\n      await getInvoice.delete();\n      commit(\"DELETE_INVOICE\", docId);\n    },\n    async UPDATE_STATUS_TO_PAID({ commit }, docId) {\n      const getInvoice = db.collection(\"invoices\").doc(docId);\n      await getInvoice.update({\n        invoicePaid: true,\n        invoicePending: false,\n      });\n      commit(\"UPDATE_STATUS_TO_PAID\", docId);\n    },\n    async UPDATE_STATUS_TO_PENDING({ commit }, docId) {\n      const getInvoice = db.collection(\"invoices\").doc(docId);\n      await getInvoice.update({\n        invoicePaid: false,\n        invoicePending: true,\n        invoiceDraft: false,\n      });\n      commit(\"UPDATE_STATUS_TO_PENDING\", docId);\n    },\n  },\n  modules: {},\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}